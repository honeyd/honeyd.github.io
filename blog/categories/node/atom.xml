<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: node | Honey Darling]]></title>
  <link href="http://honeyd.github.io/blog/categories/node/atom.xml" rel="self"/>
  <link href="http://honeyd.github.io/"/>
  <updated>2013-11-12T19:37:48-05:00</updated>
  <id>http://honeyd.github.io/</id>
  <author>
    <name><![CDATA[Honey Darling]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Building a Simple Custom Module in Node.js]]></title>
    <link href="http://honeyd.github.io/blog/2013/08/29/building-a-simple-custom-module-in-node-js/"/>
    <updated>2013-08-29T11:45:00-04:00</updated>
    <id>http://honeyd.github.io/blog/2013/08/29/building-a-simple-custom-module-in-node-js</id>
    <content type="html"><![CDATA[<p>Writing modular code is one of my very favorite things to do, so it wasn’t long in my adventure with Node.js before I was trying to understand how to build a custom module. I think I’m finally beginning to grasp exactly how custom modules are typically constructed as well as how they are pulled in as dependencies to my Node application.</p>

<p>First, I’ll create an app.js file from which my experiments will run. For now, I’ll leave app.js empty. Side note: app.js is the typical name of the main file of your new Node.js application.</p>

<p>In the same directory as app.js, I’ll create a new JavaScript file called utils.js. This will be my new module. I’ll add two functions to my utils module that I will be using in my Node.js application.</p>

<p><code>javascript
var addHello = function(name) {
  return "Hello " + name;
};
var addGoodbye = function(name) {
  return "Goodbye " + name;
};
</code></p>

<p>Even though my utils module defines two perfectly good functions, these functions are not yet available to my application. In order to bring my utils module into my application, I define a dependency by using the require() function. In my app.js, I’ll add the following:</p>

<p><code>javascript
var utils = require('./utils');
</code></p>

<p>Unfortunately, if I try to run <code>console.log(utils.addHello("Honey"));</code> in my app.js, the code will break. The <code>require()</code> function doesn’t just include the code in my module. Instead, it wraps the code in my module up in a closure that then returns anything set to <code>module.exports</code>. In other words, I need to add the functions I created to a special object called <code>module.exports</code> so that requiring my module will return the <code>addHello()</code> and <code>addGoodbye()</code> methods. I can do this my modifying utils.js in a couple of different ways:</p>

<p><code>javascript
var addHello = function(name) {
  return "Hello " + name;
};
var addGoodbye = function(name) {
  return "Goodbye " + name;
};
module.exports.addHello = addHello;
module.exports.addGoodbye = addGoodbye;
</code></p>

<p>OR through direct assignment:</p>

<p><code>javascript
module.exports.addHello = function(name) {
  return "Hello " + name;
};
module.exports.addGoodbye = function(name) {
  return "Goodbye " + name;
};
</code></p>

<p>Now when I try to use these functions in app.js, everything should work swimmingly.</p>

<p><code>javascript
var utils = require('./utils');
console.log(utils.addHello("Honey"));
//=&gt; Hello Honey
</code></p>

<p>So far so good? Good. There are some other things to be aware of.</p>

<p>module.exports vs. exports</p>

<p>You may notice that sometimes, people will use the variable exports instead of module.exports. In my utils.js, I can replace all my references to module.exports with just exports, and everything will continue to work as expected.</p>

<p><code>javascript
exports.addHello = function(name) {
  return "Hello " + name;
};
exports.addGoodbye = function(name) {
  return "Goodbye " + name;
};
</code></p>

<p>Remember that wrapper I mentioned, that is responsible for packaging the code in my module? Well, before it pulls in my code, it assigns <code>module.exports</code> to <code>exports</code>, so that <code>exports</code> is just a pointer to <code>module.exports</code>. Take a look at this excellent answer from StackOverflow: <a href="http://stackoverflow.com/questions/16383795/difference-between-module-exports-and-exports-in-the-commonjs-module-system/16383925#16383925">Difference between “module.exports” and “exports” in the CommonJS Module System</a>.</p>

<p>In other words, <code>exports</code> is a shortcut to <code>module.exports</code> (less typing), but it’s not the variable that is returned, so I have to be careful. As a result of this, I see the following pretty often, especially when a custom module is a constructor:</p>

<p><code>javascript
var Book = exports = module.exports = function() {};
</code></p>

<p>That’s a lot of assignment! This statement not only ensures that <code>exports</code> and <code>module.exports</code> are the same, but it also assigns the module function to a variable that can be used for anything I like outside of the constructor function (like adding methods to the prototype, for example).</p>

<p>Interestingly, I can <code>require()</code> a directory, not just a single file. Node.js will gladly look in the directory and see if I have an index.js file to use, and pull that in if it exists. If I wanted to package up a bunch of modules into one <code>require()</code>, I might add something like this to index.js (assuming one.js and two.js exist in the same folder):</p>

<p><code>javascript
module.exports = {
  one: require('./one'),
  two: require('./two')
};
</code></p>

<p>Then I can require the directory in app.js (assuming index.js, one.js, and two.js live in a directory called “stuff”):</p>

<p><code>javascript
var stuff = require(./stuff);
</code></p>
]]></content>
  </entry>
  
</feed>
