<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: development | Honey Darling]]></title>
  <link href="http://honeyd.github.io/blog/categories/development/atom.xml" rel="self"/>
  <link href="http://honeyd.github.io/"/>
  <updated>2013-11-12T19:37:48-05:00</updated>
  <id>http://honeyd.github.io/</id>
  <author>
    <name><![CDATA[Honey Darling]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Subversion to Git: A Retrospective]]></title>
    <link href="http://honeyd.github.io/blog/2013/11/12/subversion-to-git-a-retrospective/"/>
    <updated>2013-11-12T17:46:00-05:00</updated>
    <id>http://honeyd.github.io/blog/2013/11/12/subversion-to-git-a-retrospective</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/Git-Logo-White.png" width="350">
I knew I wanted my company to make the switch from SVN to Git, for a number of reasons:</p>

<ul>
<li>I had been using Git with Github for a while and it felt good.</li>
<li>Our workflow with Subversion was dysfunctional in that no one could commit until code was ready for production.</li>
<li>We never branched with Subversion, so working together on a project was painful (emailing patches, yikes).</li>
<li>Our Subversion server is in the basement, that sometimes floods. We could have lost all that stuff.</li>
</ul>


<h2>Windows</h2>

<p>My fellow developers and I live in a Windows environment, which is not impossible to Git-ify, but it&rsquo;s certainly more challenging than if we were a bunch of bash geeks.</p>

<ul>
<li>When making the switch, I had to be sensitive to how my fellow devs would use GUIs to interact with our repositories.</li>
<li>Pulling our Subversion repository down into Git was very slow on Windows, which meant using a Linux virtual machine to get things started.</li>
</ul>


<h2>git svn clone</h2>

<p>The first step was to pull the Subversion repository down into a Git repository by running <code>git svn clone</code>. I followed this <a href="http://john.albin.net/git/convert-subversion-to-git">awesome guide</a> to perform the following:</p>

<ol>
<li>Retrieve a list of all Subversion committers</li>
<li>Clone the Subversion repository using git svn</li>
</ol>


<p>I took one look at our Subversion repository and knew right away that I couldn&rsquo;t use the <code>--stdlayout</code> flag to pull branches, tags, and trunk. Our repository was all over the place, and it had been moved around a lot over the years, which meant that we would lose commits. I decided to just pull down everything and break things out later.</p>

<h3>We lost commits</h3>

<p>It&rsquo;s true, any commits that took place before directories were moved within our repository are no longer part of the history of those directories in Git. We made a decision to let those earlier commits go, rather than figure out a way to get them back. We might just run SVN forever in case we really need to go back.</p>

<h3>git-svn died of signal 13</h3>

<p>Our Subversion repository is 63,000 commits, which Git had to churn through and transform into Git commits. This was a very long churn (way longer on Windows). Eventually, git svn croaked. The good news is that you don&rsquo;t have to start over when this happens. Performing a <code>git svn fetch</code> will continue where git svn died. I used <code>while ! git svn fetch ; do sleep 1 ; done</code> from [<a href="http://stackoverflow.com/a/13246655/2097613">http://stackoverflow.com/a/13246655/2097613</a>] to get further longer, but even this would eventually die. It took about 12 hours to git svn clone 63,000 commits on a Linux VM with four cores.</p>

<h3>git svn fetch</h3>

<p>When we were ready to make the big switch, I did one last <code>git svn fetch</code> on the repository to get the latest SVN changes before moving to Git. I saw commits pull in and thought everything was great. But wait! Running a <code>git log</code> showed that I was missing the last 100 commits, and there was no way (that I could figure) to get those in. I had to start all over again, with a 12 hour long <code>git svn clone</code>. I&rsquo;m not sure what happened, but I&rsquo;m assuming that I did something to disrupt <code>git svn</code> in my experimentation, perhaps when I was playing with converting svn:ignore into .gitignore and then reverting.</p>

<h3>git_split</h3>

<p>Our Subversion repository was a beast. I used a <a href="https://github.com/vangorra/git_split">handy little script</a> to split directories in my Git repository out into their own bare repositories, complete with all the change history. It was this process that made me learn about the <a href="http://www.saintsjd.com/2011/01/what-is-a-bare-git-repository/">difference between bare and working repositories</a>.</p>

<h2>The Workflow</h2>

<p>I work with about ten developers, most of whom are comfortable in a GUI-based environment. I wanted the switch to Git to be beneficial for everyone, and I wanted to avoid disruption, if at all possible. I gave two presentations in two weeks: an intro to Git, and then a workflow presentation. I wrote up a very long guide, describing every action that anyone might want to take with Git, using EGit (the Subclipse Git counterpart for Eclipse) and TortoiseGit.</p>

<p>In retrospect, I don&rsquo;t think I could have possibly known what would happen when we flipped the switch. A whole plentitude of issues arose immediately.</p>

<ul>
<li>LF to CRLF conversion: When installing TortoiseGit, some people had chosen different configurations for handling LF to CRLF file conversion. After the switch, we decided to turn off conversion for everyone, which made a ton of dirty files in everyone&rsquo;s working copies. Fixing this mess was not a piece of cake.</li>
<li>Deployment: Our production server is a working copy, so our typical deployment was a matter of looking at differences in Tortoise SVN&rsquo;s lovely Check for Modifications tool and then updating the files we wanted. With Git, this process turned into a fetch then a diff then a pull, pulling everything of course, all with password prompts.</li>
<li>Branching: Although I encouraged people to start branching, it became clear very quickly that branching was not optional. In retrospect, I would have pushed branching sooner in the switch.</li>
<li>Dirty working copies: I thought it would be fairly seamless to copy the Git repository over existing working copies so that dirty files could remain dirty, but for everyone who did not have a starting clean repository, there were issues that weren&rsquo;t easily resolved.</li>
<li>Conflicts: I didn&rsquo;t realize there would be so many conflicts right off the bat. I was not prepared to help my fellow developers get through conflicts in EGit or Tortoise Git. We made some mistakes when resolving conflicts that resulted in accidentally reverting the repository, sending old files back out to production, and generally breaking stuff all over the place.</li>
</ul>


<h2>The Good News</h2>

<p>Yes, the switch was challenging, but so, so satisfying. I knew there were reasons to move, but I don&rsquo;t think I realized how awesome it would be to have our version control in Git.</p>

<ul>
<li>Everyone&rsquo;s branching! We have branches all over the place!</li>
<li>People are committing! There&rsquo;s no reason not to commit anymore, and this feels great!</li>
<li><a href="https://bitbucket.org">Bitbucket</a> is excellent. We haven&rsquo;t been able to scan through code in a browser in a long time and this is extremely convenient. Also, I needed support a couple of times and Bitbucket was responsive and helpful. And one more thing, Bitbucket&rsquo;s integration with JIRA is SWEET.</li>
<li>A deployment tool! Finally, switching to Git and the pain of deployment was enough to get the resources I needed to make a long-time dream, push-button deployment, a reality at my company.</li>
</ul>


<p>It&rsquo;s been about three weeks since we moved to Git, and everyone&rsquo;s gotten into a comfortable flow. It was total chaos for about a week, and then things worked themselves out. I cannot thank my fellow developers enough for their patience and their help. From quickly written file system scripts to mass reverts, from work on the deployment tool to saving me when I felt overwhelmed. I love my job!</p>

<h2>Resources</h2>

<p>Here&rsquo;s just about everything from my SVN to Git bookmarks folder:</p>

<ul>
<li><a href="http://jonmaddox.com/2008/03/05/cleanly-migrate-your-subversion-repository-to-a-git-repository/">Cleanly Migrate Your Subversion Repository to a Git Repository</a></li>
<li><a href="http://blokspeed.net/blog/2010/09/converting-from-subversion-to-git/">Converting from Subversion to Git</a></li>
<li><a href="http://stackoverflow.com/questions/79165/how-to-migrate-svn-with-history-to-a-new-git-repository">How to migrate SVN with history to a new Git repository</a></li>
<li><a href="http://john.albin.net/git/convert-subversion-to-git">Converting a Subversion repository to Git</a></li>
<li><a href="http://thomasrast.ch/git/git-svn-conversion.html">Converting an SVN repository to Git</a></li>
<li><a href="http://stackoverflow.com/questions/1425030/how-to-update-git-log-after-git-svn-fetch-on-a-bare-repo">How to update git log after git svn fetch on a bare repo</a></li>
<li><a href="http://scottchacon.com/2011/08/31/github-flow.html">Issues with git-flow</a></li>
<li><a href="http://stackoverflow.com/questions/15377847/move-all-new-code-on-master-to-a-new-branch-in-git">Move all new code on master to a new branch in Git</a></li>
<li><a href="http://blogs.atlassian.com/2013/01/atlassian-svn-to-git-migration-technical-side/">From SVN to Git: How Atlassian Made the Switch</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Firebase Priority and AngularFire]]></title>
    <link href="http://honeyd.github.io/blog/2013/10/04/firebase-priority-and-angularfire/"/>
    <updated>2013-10-04T16:38:00-04:00</updated>
    <id>http://honeyd.github.io/blog/2013/10/04/firebase-priority-and-angularfire</id>
    <content type="html"><![CDATA[<p>I recently worked through building a sample application using <a href="http://angularjs.org/">AngularJS</a> and <a href="http://angularfire.com/">AngularFire</a> (the officially supported AngularJS API for working with <a href="https://www.firebase.com/">Firebase</a>). You can see the results of my experiments here: <a href="https://github.com/honeyd/my-points">https://github.com/honeyd/my-points</a>.</p>

<p>Firebase doesn&rsquo;t have a ton of ways to query data. Essentially, you have three choices:</p>

<ol>
<li>Design the data structure so that locations represent queried data</li>
<li>After retrieval, filter the results yourself</li>
<li>Use <a href="https://www.firebase.com/docs/ordered-data.html">priority</a></li>
</ol>


<p>For my example app, I needed a way to pull all items that occurred between two dates. When I retrieve the children of a Firebase location, I can specify some boundaries.</p>

<p><code>javascript
var ref = new Firebase('https://firebase-url/items');
// explicit data binding (1-way)
$scope.items = angularFireCollection(ref.startAt(1).endAt(10));
// implicit data binding (2-way)
// angularFire(ref.startAt(1).endAt(10), $scope, 'items');
</code></p>

<p>In this example, <code>$scope.items</code> will include all items with a priority between 1 and 10 inclusive.</p>

<p>Unfortunately, using implicit data binding (<code>angularFire()</code>) on a location that represents an array is problematic at the time of this writing. When the location is loaded into your model, priority is not taken into account, and will be removed the first time the data is saved back to Firebase. See <a href="https://github.com/firebase/angularFire/issues/116">issue 116</a>.</p>

<p>So <code>angularFire()</code> is out and <code>angularFireCollection()</code> is in.</p>

<p>The difference between <code>angularFire()</code> and <code>angularFireCollection()</code> is that <code>angularFire()</code> will set up implicit, or 2-way data binding with your AngularJS model, and <code>angularFireCollection()</code> will only be 1-way, but provide a lot more flexibility.</p>

<h2>angularfire()</h2>

<p>When I associate a location with my model,
<code>
angularFire(new Firebase('https://firebase-url/items'), $scope, 'items')
</code>
any changes I make to that model (<code>$scope.items</code>) will change the Firebase data as well. This is real nice. I can use <code>$scope.items.push({name: 'Sweetness'})</code> and <code>$scope.items.splice(0, 1)</code> and <code>$scope.items[0].name = 'Awesome'</code> to my heart&rsquo;s content.</p>

<h2>angularFireCollection()</h2>

<p>I can assign a Firebase location to any variable I like, but this variable will not be watched for changes and will not modify the Firebase location unless I call the appropriate methods. The good news is that I can use <code>angularFireCollection()</code> to preserve the priority I have already set on an item as well as set a priority when an item is created or updated.</p>

<p><code>javascript
$scope.items = angularFireCollection(new Firebase('https://firebase-url/items'));
$scope.items.add({name: 'Yes'}).setPriority(1);
</code>
The other good news about using <code>angularFireCollection()</code> is that the ordering of items is better than when using <code>angularFire()</code>, but it&rsquo;s not perfect. See <a href="https://github.com/firebase/angularFire/issues/19">issue 19</a>.</p>

<p>To see these ideas in action, visit <a href="http://my-points.herokuapp.com/">my sample app</a>, or <a href="http://plnkr.co/edit/3AfFfo">http://plnkr.co/edit/3AfFfo</a>, or <a href="https://github.com/honeyd/my-points">https://github.com/honeyd/my-points</a>.</p>

<p>I have my eye on the <a href="https://github.com/firebase/angularFire">AngularFire repo</a> for updates to the issues referenced in this post. I&rsquo;ll edit as AngularFire evolves.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows: Open a File from the Command Line with Sublime Text 2]]></title>
    <link href="http://honeyd.github.io/blog/2013/09/26/windows-open-a-file-from-the-command-line-with-sublime-text/"/>
    <updated>2013-09-26T11:20:00-04:00</updated>
    <id>http://honeyd.github.io/blog/2013/09/26/windows-open-a-file-from-the-command-line-with-sublime-text</id>
    <content type="html"><![CDATA[<p>As I spend more time on the command line, I find myself seeking out convenience methods for doing things that usually mean a lot of clicking around, especially in a Windows environment. I&rsquo;m also moving back and forth a bit between a Linux virtual machine and my regular work Windows OS, and I&rsquo;m wanting certain things to exist in both places.</p>

<p>BTW: I&rsquo;m running Windows 7 Professional 64-bit. Your mileage may vary.</p>

<h2>The Goal:</h2>

<p><strong><code>subl myfile.txt</code> opens myfile.txt in Sublime Text 2 from a Windows command prompt</strong></p>

<h2>Step 1: Create a Windows batch file that will run when the command prompt is opened</h2>

<ul>
<li>Create a file where ever you like called autorun.bat. I put mine in <code>c:\dev\autorun.bat</code></li>
<li><p>Open autorun.bat in a text editor and add the following:
<code>
doskey subl="C:\Program Files\Sublime Text 2\sublime_text.exe" $*
</code>
(Replace the path to your Sublime Text executable as necessary.)</p></li>
<li><p>Save the file</p></li>
</ul>


<h2>Step 2: Add the autorun.bat file to your registry</h2>

<ul>
<li>Open the Registry Editor (Start &ndash;> Type &lsquo;regedit&rsquo; in the Search programs and files input)</li>
<li>Click down into HKEY_CURRENT_USER\Software\Microsoft\Command Processor</li>
<li>If an AutoRun value does not exist, create a new one

<ul>
<li>Right-click Command Processor and click New &ndash;> String Value</li>
<li>Name the new value &lsquo;AutoRun&rsquo;</li>
<li>Right-click the new value and select Modify&hellip;</li>
<li>Enter the path to your autorun.bat in the Value data field. Mine says &lsquo;c:\dev\autorun.bat&rsquo;</li>
<li>Click OK</li>
</ul>
</li>
</ul>


<h2>Step 3: Try it out</h2>

<ul>
<li>Open a new command prompt</li>
<li>cd to a directory with a file that can be opened with a text editor</li>
<li>Type subl your-file-name.txt</li>
<li>Be happy</li>
</ul>


<h2>Resources</h2>

<p>Without these helpful resources, none of this would have been possible.</p>

<ul>
<li><a href="http://stackoverflow.com/questions/9440639/sublime-text-from-command-line-win7">Sublime Text from Command Line (Win7)</a></li>
<li><a href="http://www.microsoft.com/resources/documentation/windows/xp/all/proddocs/en-us/doskey.mspx?mfr=true">Doskey</a></li>
<li><a href="http://darkforge.blogspot.co.uk/2010/08/permanent-windows-command-line-aliases.html">Permanent Windows command-line aliases with doskey and AutoRun</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a Simple Custom Module in Node.js]]></title>
    <link href="http://honeyd.github.io/blog/2013/08/29/building-a-simple-custom-module-in-node-js/"/>
    <updated>2013-08-29T11:45:00-04:00</updated>
    <id>http://honeyd.github.io/blog/2013/08/29/building-a-simple-custom-module-in-node-js</id>
    <content type="html"><![CDATA[<p>Writing modular code is one of my very favorite things to do, so it wasn’t long in my adventure with Node.js before I was trying to understand how to build a custom module. I think I’m finally beginning to grasp exactly how custom modules are typically constructed as well as how they are pulled in as dependencies to my Node application.</p>

<p>First, I’ll create an app.js file from which my experiments will run. For now, I’ll leave app.js empty. Side note: app.js is the typical name of the main file of your new Node.js application.</p>

<p>In the same directory as app.js, I’ll create a new JavaScript file called utils.js. This will be my new module. I’ll add two functions to my utils module that I will be using in my Node.js application.</p>

<p><code>javascript
var addHello = function(name) {
  return "Hello " + name;
};
var addGoodbye = function(name) {
  return "Goodbye " + name;
};
</code></p>

<p>Even though my utils module defines two perfectly good functions, these functions are not yet available to my application. In order to bring my utils module into my application, I define a dependency by using the require() function. In my app.js, I’ll add the following:</p>

<p><code>javascript
var utils = require('./utils');
</code></p>

<p>Unfortunately, if I try to run <code>console.log(utils.addHello("Honey"));</code> in my app.js, the code will break. The <code>require()</code> function doesn’t just include the code in my module. Instead, it wraps the code in my module up in a closure that then returns anything set to <code>module.exports</code>. In other words, I need to add the functions I created to a special object called <code>module.exports</code> so that requiring my module will return the <code>addHello()</code> and <code>addGoodbye()</code> methods. I can do this my modifying utils.js in a couple of different ways:</p>

<p><code>javascript
var addHello = function(name) {
  return "Hello " + name;
};
var addGoodbye = function(name) {
  return "Goodbye " + name;
};
module.exports.addHello = addHello;
module.exports.addGoodbye = addGoodbye;
</code></p>

<p>OR through direct assignment:</p>

<p><code>javascript
module.exports.addHello = function(name) {
  return "Hello " + name;
};
module.exports.addGoodbye = function(name) {
  return "Goodbye " + name;
};
</code></p>

<p>Now when I try to use these functions in app.js, everything should work swimmingly.</p>

<p><code>javascript
var utils = require('./utils');
console.log(utils.addHello("Honey"));
//=&gt; Hello Honey
</code></p>

<p>So far so good? Good. There are some other things to be aware of.</p>

<p>module.exports vs. exports</p>

<p>You may notice that sometimes, people will use the variable exports instead of module.exports. In my utils.js, I can replace all my references to module.exports with just exports, and everything will continue to work as expected.</p>

<p><code>javascript
exports.addHello = function(name) {
  return "Hello " + name;
};
exports.addGoodbye = function(name) {
  return "Goodbye " + name;
};
</code></p>

<p>Remember that wrapper I mentioned, that is responsible for packaging the code in my module? Well, before it pulls in my code, it assigns <code>module.exports</code> to <code>exports</code>, so that <code>exports</code> is just a pointer to <code>module.exports</code>. Take a look at this excellent answer from StackOverflow: <a href="http://stackoverflow.com/questions/16383795/difference-between-module-exports-and-exports-in-the-commonjs-module-system/16383925#16383925">Difference between “module.exports” and “exports” in the CommonJS Module System</a>.</p>

<p>In other words, <code>exports</code> is a shortcut to <code>module.exports</code> (less typing), but it’s not the variable that is returned, so I have to be careful. As a result of this, I see the following pretty often, especially when a custom module is a constructor:</p>

<p><code>javascript
var Book = exports = module.exports = function() {};
</code></p>

<p>That’s a lot of assignment! This statement not only ensures that <code>exports</code> and <code>module.exports</code> are the same, but it also assigns the module function to a variable that can be used for anything I like outside of the constructor function (like adding methods to the prototype, for example).</p>

<p>Interestingly, I can <code>require()</code> a directory, not just a single file. Node.js will gladly look in the directory and see if I have an index.js file to use, and pull that in if it exists. If I wanted to package up a bunch of modules into one <code>require()</code>, I might add something like this to index.js (assuming one.js and two.js exist in the same folder):</p>

<p><code>javascript
module.exports = {
  one: require('./one'),
  two: require('./two')
};
</code></p>

<p>Then I can require the directory in app.js (assuming index.js, one.js, and two.js live in a directory called “stuff”):</p>

<p><code>javascript
var stuff = require(./stuff);
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Looping over an array, beginning at an offset]]></title>
    <link href="http://honeyd.github.io/blog/2013/08/19/looping-over-an-array-beginning-at-an-offset/"/>
    <updated>2013-08-19T10:30:00-04:00</updated>
    <id>http://honeyd.github.io/blog/2013/08/19/looping-over-an-array-beginning-at-an-offset</id>
    <content type="html"><![CDATA[<p>I&rsquo;m playing around with building a little Texas Hold &lsquo;em simulator. I set up the players as an array, and started a hand. I realized pretty quickly that I&rsquo;ll need to start play at a different player each hand, which means looping over the array with a different offset every time. I wondered, how do I loop over the entire array, beginning at a position other than 0? And then the magical modulus operator came to my rescue.</p>

<p>``` javascript
// set up the array
var fruit = [&lsquo;banana&rsquo;,&lsquo;apple&rsquo;,&lsquo;orange&rsquo;,&lsquo;kiwi&rsquo;,&lsquo;watermelon&rsquo;];</p>

<p>// set an offset
var offset = 3;</p>

<p>// loop over the array
for (var i = 0; i &lt; fruit.length; i++) {</p>

<p>  // calculate the iterator
  var it = (i + offset) % fruit.length;</p>

<p>  // access the array element, using the fancy iterator
  console.log(fruit[it]);</p>

<p>}
```</p>

<p><code>
kiwi
watermelon
banana
apple
orange
</code></p>
]]></content>
  </entry>
  
</feed>
